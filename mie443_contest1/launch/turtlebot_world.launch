<launch>
  <arg name="gui"        default="true"/>
  <arg name="world"      default="1"/>
  <arg name="world_file" default="$(find mie443_contest1)/worlds/world_$(arg world).world"/>

  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"    value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

    <!-- this line will literally launch a launch file -->
    <!-- <include file="$(find <packagename>)/path/filename.launch"> -->
  <!-- <include file="$(find mie443_contest1)/launch/gmapping.launch"/> -->
  <!-- gmapping has no nodes called gazebo -->
  <!-- roslaunch mie443_contest1 gmapping.launch -->

 
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_rviz_launchers)/rviz/navigation.rviz"/> -->


  <!-- <include file="#(find opt)/ros/kinetic/share/turtlebot_rviz_launchers/launch/view_navigation.launch"/> -->
  <!-- roslaunch turtlebot_rviz_launchers view_navigation.launch -->

<!-- /opt/ros/kinetic/share/turtlebot_rviz_launchers/launch -->
<!-- getting error that i'm loading a node called "node " twice due to the launch files -->

  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>

  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  

</launch>
